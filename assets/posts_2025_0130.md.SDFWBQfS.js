import{_ as t,c as e,G as a,b as r}from"./chunks/framework.Cng_8ly0.js";const i=JSON.parse('{"title":"Git的下载和安装【详细】","description":"git安装说明","frontmatter":{"title":"Git的下载和安装【详细】","tags":["教程"],"categories":["教程"],"date":"2025-1-30","description":"git安装说明","articleGPT":"这是一篇git安装教程文章","references":null,"head":[["link",{"rel":"canonical","href":"lrnp666.cn/posts/2025/0130"}]]},"headers":[],"relativePath":"posts/2025/0130.md","filePath":"posts/2025/0130.md","lastUpdated":null}');const n=t({name:"posts/2025/0130.md"},[["render",function(t,i,n,l,o,h){return r(),e("div",null,i[0]||(i[0]=[a('<h1 id="目录" tabindex="-1"><strong>目录</strong> <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;**目录**&quot;">​</a></h1><h2 id="一-前言" tabindex="-1">一．前言 <a class="header-anchor" href="#一-前言" aria-label="Permalink to &quot;一．前言&quot;">​</a></h2><h2 id="二-准备工作" tabindex="-1">二．准备工作 <a class="header-anchor" href="#二-准备工作" aria-label="Permalink to &quot;二．准备工作&quot;">​</a></h2><h2 id="三-安装-无特殊需求可只看第五步一路next即可" tabindex="-1">三．安装（无特殊需求可只看第五步一路next即可） <a class="header-anchor" href="#三-安装-无特殊需求可只看第五步一路next即可" aria-label="Permalink to &quot;三．安装（无特殊需求可只看第五步一路next即可）&quot;">​</a></h2><h2 id="四-检验安装" tabindex="-1">四.检验安装 <a class="header-anchor" href="#四-检验安装" aria-label="Permalink to &quot;四.检验安装&quot;">​</a></h2><h2 id="一-前言-1" tabindex="-1">一．前言 <a class="header-anchor" href="#一-前言-1" aria-label="Permalink to &quot;一．前言&quot;">​</a></h2><p>本文讲解Git的下载和安装, 本文也是从我的以前写的csdn搬运而来，有些格式就有很多问题，还请见谅，原地址：<a href="https://blog.csdn.net/m0_62527122/article/details/125721836?spm=1001.2014.3001.5501" target="_blank" rel="noreferrer">https://blog.csdn.net/m0_62527122/article/details/125721836?spm=1001.2014.3001.5501</a></p><h2 id="二-准备工作-1" tabindex="-1">二．准备工作 <a class="header-anchor" href="#二-准备工作-1" aria-label="Permalink to &quot;二．准备工作&quot;">​</a></h2><p>首先下载安装包，可在官网下载，但速度很慢 Git - Downloads 选择需要的操作系统版本下载。<br> 可以选择镜像网站下载CNPM Binaries Mirror 选择最下方最新版。 选择合适的操作系统。<br> 也可以在GitHub上下载 <a href="https://github.com/waylau/git-for-win" target="_blank" rel="noreferrer">https://github.com/waylau/git-for-win</a><br> 版本相对低一些。 下载好后就可以准备安装了</p><h2 id="三-安装-无特殊需求可只看第五步一路next即可-1" tabindex="-1">三．安装（无特殊需求可只看第五步一路next即可） <a class="header-anchor" href="#三-安装-无特殊需求可只看第五步一路next即可-1" aria-label="Permalink to &quot;三．安装（无特殊需求可只看第五步一路next即可）&quot;">​</a></h2><h3 id="_1-开始安装" tabindex="-1">&lt;1&gt;开始安装 <a class="header-anchor" href="#_1-开始安装" aria-label="Permalink to &quot;&lt;1&gt;开始安装&quot;">​</a></h3><p>这个界面主要展示了 GPL 协议1的内容，点击 [next] 到第二步。</p><h3 id="_2-选择安装目录" tabindex="-1">&lt;2&gt;选择安装目录 <a class="header-anchor" href="#_2-选择安装目录" aria-label="Permalink to &quot;&lt;2&gt;选择安装目录&quot;">​</a></h3><p>点击 “Browse…” 更换目录，放在合适位置即可。点击 [next] 到第三步。</p><h3 id="_3-选择安装组件" tabindex="-1">&lt;3&gt;选择安装组件 <a class="header-anchor" href="#_3-选择安装组件" aria-label="Permalink to &quot;&lt;3&gt;选择安装组件&quot;">​</a></h3><h4 id="大致介绍" tabindex="-1">大致介绍 <a class="header-anchor" href="#大致介绍" aria-label="Permalink to &quot;大致介绍&quot;">​</a></h4><p>添加图标到桌面<br> 添加到右键菜单栏 大文件支持<br> 关联文件<br> 关联文件<br> 检查git每日更新<br> 将git配置文件添加到Windows终端 点击 [next] 到下一步。</p><h3 id="_4-选择开始菜单文件夹" tabindex="-1">&lt;4&gt;选择开始菜单文件夹 <a class="header-anchor" href="#_4-选择开始菜单文件夹" aria-label="Permalink to &quot;&lt;4&gt;选择开始菜单文件夹&quot;">​</a></h3><p>“GIT”可以更改为其他名称，或者下面打勾不要文件夹，看个人喜好。 效果 点击 [next] 到下一步。</p><h3 id="_5-选择-git-默认编辑器" tabindex="-1">&lt;5&gt;选择 Git 默认编辑器 <a class="header-anchor" href="#_5-选择-git-默认编辑器" aria-label="Permalink to &quot;&lt;5&gt;选择 Git 默认编辑器&quot;">​</a></h3><p>GIT内置了十一种编译器供你选择，常见的Visual Studio Code、Atom、Notepad、Notepad++、Sublime Text、Vim等等，选择你的编译器。点击 [next] 到下一步。</p><h3 id="_6-决定初始化新项目-仓库-的主干名字" tabindex="-1">&lt;6&gt;决定初始化新项目(仓库)的主干名字 <a class="header-anchor" href="#_6-决定初始化新项目-仓库-的主干名字" aria-label="Permalink to &quot;&lt;6&gt;决定初始化新项目(仓库)的主干名字&quot;">​</a></h3><p>第一种为GIT自行决定，名称为“master”，第二个是自行决定，默认为“main”，一般选择第一种点击 [next] 到下一步。<br> 注：第二个NEW很多团队已经更改主干名为main，因为master，有人认为涉及种族歧视，故呼吁改名<br> 可参考<br><a href="https://blog.csdn.net/Black_Customer/article/details/112468642" target="_blank" rel="noreferrer">https://blog.csdn.net/Black_Customer/article/details/112468642</a></p><h3 id="_7-调整你的-path-环境变量" tabindex="-1">&lt;7&gt;调整你的 path 环境变量 <a class="header-anchor" href="#_7-调整你的-path-环境变量" aria-label="Permalink to &quot;&lt;7&gt;调整你的 path 环境变量&quot;">​</a></h3><p>第一个为仅从Git Bash使用Git。<br> 第二个为从命令以及第三方软件进行Git。<br> 第三种为从Git和可选的Unix工具使用。<br> 一般选择第二种，点击 [next] 到下一步。</p><h3 id="_8-选择-ssh-执行文件" tabindex="-1">&lt;8&gt;选择 SSH 执行文件 <a class="header-anchor" href="#_8-选择-ssh-执行文件" aria-label="Permalink to &quot;&lt;8&gt;选择 SSH 执行文件&quot;">​</a></h3><p>第一种为使用捆绑的 OpenSSH 这使用的 ssh.exe 是 Git 自带的。<br> 第二种为使用 TortoisePlink (注，这是一个软件) 要使用 PuTTY，请指定 TortoisePlink.exe 的现有副本的路径 为 TortoisePlink 设置 ssh.variant。<br> 第三种为使用外部 OpenSSH 新！这使用外部 ssh.exe 文件。 Git 不会安装自己的 OpenSSH（和相关）二进制文件，而是使用在环境变量 PATH 中找到的它们。<br> 默认即可，点击 [next] 到下一步。</p><h3 id="_9-选择https后端传输" tabindex="-1">&lt;9&gt;选择HTTPS后端传输 <a class="header-anchor" href="#_9-选择https后端传输" aria-label="Permalink to &quot;&lt;9&gt;选择HTTPS后端传输&quot;">​</a></h3><p>第一种为使用 OpenSSL 库 服务器证书将使用 ca-bundle.crt 文件进行验证。<br> 第二种为使用本机 Windows 安全通道库 服务器证书将使用 Windows 证书存储进行验证。 此选项还允许您使用公司内部分发的内部根 CA 证书，例如通过 Active Directory 域服务。 对于这两种具体区别<br> 可参考<br><a href="https://stackoverflow.com/questions/62456484/whats-the-difference-between-openssl-and-the-native-windows-secure-channel-libr" target="_blank" rel="noreferrer">git - What&#39;s the difference between OpenSSL and the native windows Secure Channel library - Stack Overflow</a><br> 普通人默认即可，点击 [next] 到下一步。</p><h3 id="_10-配置行尾符号转换" tabindex="-1">&lt;10&gt;配置行尾符号转换 <a class="header-anchor" href="#_10-配置行尾符号转换" aria-label="Permalink to &quot;&lt;10&gt;配置行尾符号转换&quot;">​</a></h3><p>第一种为签出 Windows 样式，提交 Unix 样式的行结尾 Git 签出文本文件时，会将 LF 转换为 CRLF。 提交文本文件时，CRLF 将转换为 LF。 对于跨平台项目，这是 Windows 上的建议设置（&quot;core.autocrif&quot; 设置为 &quot;true&quot;）。<br> 第二种为按原样签出，提交 Unix 样式的行结尾 Git 在签出文本文件时不会执行任何转换。提交文本文件时，CRLF 将转换为 LF。 对于跨平台项目，这是在 Unix 上的建议设置（&quot;core.autocrif&quot; 设置为 &quot;input&quot;）。<br> 第三种为按原样签出，按原样提交 Git 在签出或提交文本文件时不会执行任何转换。 不建议跨平台项目选择此选项（&quot;core.autocrif&quot; 设置为 &quot;false&quot;）。<br> 对于Windows 样式和 Unix 样式到底有什么区别呢？<br> 可参考<br><a href="https://blog.csdn.net/qq_43141611/article/details/113455676" target="_blank" rel="noreferrer">Windows（CRLF）格式与Unix（LF）格式的区别</a><br><a href="https://stackoverflow.com/questions/3091524/what-are-carriage-return-linefeed-and-form-feed" target="_blank" rel="noreferrer">What are carriage return, linefeed, and form feed?</a><br> 一般默认即可，点击 [next] 到下一步。</p><h3 id="_11-配置终端模拟器以与-git-bash-一起使用" tabindex="-1">&lt;11&gt;配置终端模拟器以与 Git Bash 一起使用 <a class="header-anchor" href="#_11-配置终端模拟器以与-git-bash-一起使用" aria-label="Permalink to &quot;&lt;11&gt;配置终端模拟器以与 Git Bash 一起使用&quot;">​</a></h3><p>第一种为使用 MinTTY（MSYS2的默认终端） Git Bash 将使用 MinTTY 作为终端仿真器，该仿真器具有可调整大小的窗口非矩形选择和 Unicode 字体。 Windows 控制台程序（例如交互式 Python）必须通过 &quot;winpty&quot; 启动才能在 MinTTY 中运行。<br> 第二种为使用 Windows 的默认控制台窗口 Git 将使用 Windows 的默认控制台窗口（&quot;cmd.exe&quot;），该窗口可与 Win32 控制台程序（例如交互式Python 或 node.js）一起使用，但默认回滚非常有限，需要将其配置为使用 Unicode 字体才能正确显示非 ASCII 字符，并且在 Windows 10 之前，其窗口不可随意调整大小，并且仅允许选择矩形文本。一般选择第一种MinTTY 3功能比 cmd 多，cmd 只不过 比 MinTTY 更适合处理 Windows 的一些接口问题，这个对 Git 用处不大，除此之外 Windows 的默认控制台窗口（&#39;cmd’）有很多劣势，比如 cmd 具有非常有限的默认历史记录回滚堆栈和糟糕的字体编码等等。 相比之下，MinTTY 具有可调整大小的窗口和其他有用的可配置选项，可以通过右键单击的工具栏来打开它们 git-bash。<br> 点击 [next] 到下一步。</p><h3 id="_12-选择默认的-git-pull-行为" tabindex="-1">&lt;12&gt;选择默认的 “git pull” 行为 <a class="header-anchor" href="#_12-选择默认的-git-pull-行为" aria-label="Permalink to &quot;&lt;12&gt;选择默认的 “git pull” 行为&quot;">​</a></h3><p>默认（快进或合并） 这是 &quot;git pull&quot; 的标准行为：在可能的情况下将 当前分支 快进到 获取的分支，否则创建合并提交。 变基将当前分支变基到获取的分支上。如果没有本地提交要变基，则等同于快进。<br> 只能快进快进到获取的分支。如果不可能，则失败。<br> 可参考<br><a href="https://stackoverflow.com/questions/14894768" target="_blank" rel="noreferrer">In git how is fetch different than pull and how is merge different than rebase?</a><br><a href="https://stackoverflow.com/questions/18930527" target="_blank" rel="noreferrer">Difference between git pull and git pull</a><br> 一般默认即可，点击 [next] 到下一步。</p><h3 id="_13-选择一个凭证帮助程序" tabindex="-1">&lt;13&gt;选择一个凭证帮助程序 <a class="header-anchor" href="#_13-选择一个凭证帮助程序" aria-label="Permalink to &quot;&lt;13&gt;选择一个凭证帮助程序&quot;">​</a></h3><p>GIt凭证管理<br> 不使用凭证助手<br> 可参考<br><a href="https://stackoverflow.com/questions/66795897" target="_blank" rel="noreferrer">Is Control Panel&#39;s Credential Manager same as git&#39;s credential helpers Credential Manager and Credential manager Core</a><br><a href="https://git-scm.com/docs/gitcredentials" target="_blank" rel="noreferrer">Git - gitcredentials Documentation</a><br> 一般默认即可，点击 [next] 到下一步。</p><h3 id="_14-配置额外的选项" tabindex="-1">&lt;14&gt;配置额外的选项 <a class="header-anchor" href="#_14-配置额外的选项" aria-label="Permalink to &quot;&lt;14&gt;配置额外的选项&quot;">​</a></h3><p>启用文件缓存是将批量读取文件系统数据并将其缓存在内存中以进行某些操作，可以显著提升性能。这个选项默认开启。 启用符号链接，符号链接是一类特殊的文件， 其包含有一条以绝对路径或者相对路径的形式指向其它文件或者目录的引用，类似于 Windows 的快捷方式，不完全等同 类Unix（如 Linux） 下的 符号链接。因为该功能的支持需要一些条件，所以默认不开启。 一般默认即可，点击 [next] 到下一步。</p><h3 id="_15-配置实验性选项" tabindex="-1">&lt;15&gt;配置实验性选项 <a class="header-anchor" href="#_15-配置实验性选项" aria-label="Permalink to &quot;&lt;15&gt;配置实验性选项&quot;">​</a></h3><p>这是实验性功能，可能会有一些小错误之类的，建议不用开启。<br> 点击 [install] 进行安装。</p><h2 id="四-检验安装-1" tabindex="-1">四.检验安装 <a class="header-anchor" href="#四-检验安装-1" aria-label="Permalink to &quot;四.检验安装&quot;">​</a></h2><p>Win + r 输入cmd<br> 打开命令提示符 输入git --version<br> 类似便成功安装<br> 我使用的VS code还可检验能否安装成功<br> 在VS code中打开Terminal工具栏，新建Terminal，输入“git help”验证是否能够调用git说明，如可以调用，则安装成功。调用结果如下 现在就算安装成功了</p>',43)]))}]]);export{i as __pageData,n as default};
